"""
Django settings for drf_scaffold project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""


import logging
import os
import time
from urllib.parse import urljoin
from pathlib import Path
from os import getenv

from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-v7+ttz3-3#sfof-a#gd+rea(3=f5s!ihn00o7!&=nt2hikzh%5"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv("DEBUG") == "True"

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    # "kolo.middleware.KoloMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "drf_scaffold.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "drf_scaffold.wsgi.application"

# 数据目录
DATA_ROOT = os.path.join(BASE_DIR, "data")

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(DATA_ROOT, "db.sqlite"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

# 默认语言
LANGUAGE_CODE = "zh-Hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True
USE_L10N = True

# 数据库存储 utc 时间
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

MEDIA_ROOT = os.path.join(DATA_ROOT, "media")
MEDIA_URL = "/media/"

# 确保目录存在
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]

# 日志
LOGLEVEL = getenv("LOGLEVEL", logging.INFO)
LOGDIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOGDIR):
    os.makedirs(LOGDIR)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        # 日志格式
        "standard": {"format": "[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] " "[%(levelname)s]- %(message)s"},
        "simple": {"format": "%(levelname)s %(message)s"},  # 简单格式
    },
    # 定义具体处理日志的方式
    "handlers": {
        # 默认记录所有日志
        "default": {
            "level": LOGLEVEL,
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGDIR, "all-{}.log".format(time.strftime("%Y-%m-%d"))),
            "maxBytes": 1024 * 1024 * 100,  # 文件大小, 100Mi
            "backupCount": 5,  # 备份数
            "formatter": "standard",  # 输出格式
            "encoding": "utf-8",  # 设置默认编码，否则打印出来汉字乱码
        },
        # 输出错误日志
        "error": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGDIR, "error-{}.log".format(time.strftime("%Y-%m-%d"))),
            "maxBytes": 1024 * 1024 * 100,  # 文件大小
            "backupCount": 5,  # 备份数
            "formatter": "standard",  # 输出格式
            "encoding": "utf-8",  # 设置默认编码
        },
        # 控制台输出
        "console": {"level": LOGLEVEL, "class": "logging.StreamHandler", "formatter": "standard"},
        # 输出info日志
        "info": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGDIR, "info-{}.log".format(time.strftime("%Y-%m-%d"))),
            "maxBytes": 1024 * 1024 * 100,
            "backupCount": 5,
            "formatter": "standard",
            "encoding": "utf-8",  # 设置默认编码
        },
    },
    # 配置用哪几种 handlers 来处理日志
    "loggers": {
        # 类型 为 django 处理所有类型的日志， 默认调用
        "django": {"handlers": ["default", "console"], "level": LOGLEVEL, "propagate": False},
        # log 调用时需要当作参数传入
        "drf_scaffold": {"handlers": ["error", "info", "console", "default"], "level": LOGLEVEL, "propagate": True},
    },
}
#### 自定义配置

# API前缀
API_PREFIX = getenv("API_PREFIX", "api/")

# 统一序列化返回的时间格式
STANDARD_DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"

# drf 设置
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    # 分页
    "DEFAULT_PAGINATION_CLASS": "utils.drf.paginations.StandardResultsSetPagination",
    # 自定义错误处理
    "EXCEPTION_HANDLER": "utils.drf.exceptions.custom_exception_handler",
    # 过滤器
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    # 统一时间格式
    "DATETIME_FORMAT": STANDARD_DATETIME_FORMAT,
}
